<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Recording</title>
  
  <subtitle>Recording, Sharing, TimeSaving -- 一切成本皆时间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jibing57.com/"/>
  <updated>2019-03-05T09:22:04.544Z</updated>
  <id>http://www.jibing57.com/</id>
  
  <author>
    <name>jibing57</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Macos下因为找不到libxml2而导致nokogiri安装失败的解决办法</title>
    <link href="http://www.jibing57.com/2019/03/05/how-resolve-nokogiri-failed-by-xml2-on-macos/"/>
    <id>http://www.jibing57.com/2019/03/05/how-resolve-nokogiri-failed-by-xml2-on-macos/</id>
    <published>2019-03-05T08:26:53.000Z</published>
    <updated>2019-03-05T09:22:04.544Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天要跑一个其他的rails项目，为了不污染原先的gemset。就重建了一个gemset, 但是bundle install的时候，安装nokogiri 1.8.4一直失败。&lt;br&gt;系统版本是Macos 10.13 High Sierra中, ruby版本是rvm安装的ru
      
    
    </summary>
    
      <category term="Code" scheme="http://www.jibing57.com/categories/Code/"/>
    
    
      <category term="Ruby" scheme="http://www.jibing57.com/tags/Ruby/"/>
    
      <category term="Rails" scheme="http://www.jibing57.com/tags/Rails/"/>
    
      <category term="MacOS" scheme="http://www.jibing57.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的HTTP Code444和307设置</title>
    <link href="http://www.jibing57.com/2019/02/28/nginx_444_and_307/"/>
    <id>http://www.jibing57.com/2019/02/28/nginx_444_and_307/</id>
    <published>2019-02-28T13:50:59.000Z</published>
    <updated>2019-03-07T12:33:09.938Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nginx-444&quot;&gt;&lt;a href=&quot;#nginx-444&quot; class=&quot;headerlink&quot; title=&quot;nginx 444&quot;&gt;&lt;/a&gt;nginx 444&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;当没有显式指定default server的时候，Nginx会使用第一个server来作为默认的响应server，即使请求的Host并没有匹配到server_name。&lt;br&gt;这是为了兼容老旧的一些不带Host的HTTP请求而做的设置。官文描述: &lt;a href=&quot;http://nginx.org/en/docs/http/request_processing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How nginx processes a request&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此时可能存在一定的风险。如果有非备案的名解析到了你的Public IP上，而你的Web服务对该域名的请求有所响应的话，可能会导致Public IP被运营商封锁。&lt;/p&gt;
&lt;h4 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法:&quot;&gt;&lt;/a&gt;解决办法:&lt;/h4&gt;&lt;p&gt;在nginx中添加一个default server，并在default server中设置&lt;code&gt;return 444;&lt;/code&gt;。此时Nginx就不会响应请求，除非请求的Host是配置的。&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.jibing57.com/categories/Tools/"/>
    
    
      <category term="Nginx" scheme="http://www.jibing57.com/tags/Nginx/"/>
    
      <category term="HTTP" scheme="http://www.jibing57.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>AWS C5类型Instance的挂载点变更</title>
    <link href="http://www.jibing57.com/2019/02/25/mount-point-changed-in-C5/"/>
    <id>http://www.jibing57.com/2019/02/25/mount-point-changed-in-C5/</id>
    <published>2019-02-25T13:55:30.000Z</published>
    <updated>2019-02-26T07:47:36.448Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题点&quot;&gt;&lt;a href=&quot;#问题点&quot; class=&quot;headerlink&quot; title=&quot;问题点&quot;&gt;&lt;/a&gt;问题点&lt;/h3&gt;&lt;p&gt;一直使用的是Amazon自有的Amazon Linux，中国区的C5出来后，将原有的机器升级到C5的时候，发现额外挂载的磁盘没有挂载成功。&lt;/p&gt;
&lt;p&gt;调查了一下，C5系列属于&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nitro-based instance&lt;/a&gt;, EBS卷默认使用的是NVMe driver,设备名由原来C4的/dev/xvda1和/dev/xvdf变为了/dev/nvme[0-26]n1的格式。官网说明&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Device Naming on Linux Instances&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以前C4的机器中,/etc/fstab中设定的另外一块EBS的挂载点是/dev/xvdf, 所以导致了换用C5的时候，没能自动挂载。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# C4时的设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/xvdf   /mnt/data ext4  auto,nofail,defaults        1   2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt;查看EBS的挂载路径，然后修改/etc/fstab。解决了问题。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/dev/nvme1n1 /mnt/data ext4  auto,nofail,defaults        1   2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="EC2" scheme="http://www.jibing57.com/tags/EC2/"/>
    
      <category term="Linux" scheme="http://www.jibing57.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ruby异常</title>
    <link href="http://www.jibing57.com/2019/02/14/ruby-exception/"/>
    <id>http://www.jibing57.com/2019/02/14/ruby-exception/</id>
    <published>2019-02-14T12:04:12.000Z</published>
    <updated>2019-02-15T06:37:48.724Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;有一个通知服务，需要使用&lt;a href=&quot;https://mandrill.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mandrill&lt;/a&gt;的提供的邮件服务给客户发送邮件。开发时使用了&lt;a href=&quot;https://github.com/renz45/mandrill_mailer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mandrill_mailer&lt;/a&gt;这个GEM来实现和Mandrill服务的交互。&lt;/p&gt;
&lt;p&gt;今天监控程序报警提及昨天的邮件发送量比平时低了不少。上线查了一下日志，发现是代码中一处exception没处理好,导致程序崩溃了。&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;p&gt;Ruby 中捕获非指定类型的异常，会使用如下方式来捕获异常。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;begin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rescue =&amp;gt; e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;end&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://www.jibing57.com/categories/Code/"/>
    
    
      <category term="Ruby" scheme="http://www.jibing57.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>修改ElasticBeanstalk中Passenger的max-pool-size</title>
    <link href="http://www.jibing57.com/2018/12/25/How-to-change-max-pool-size-of-passenger-on-ElasticBeanstalk/"/>
    <id>http://www.jibing57.com/2018/12/25/How-to-change-max-pool-size-of-passenger-on-ElasticBeanstalk/</id>
    <published>2018-12-25T09:37:24.000Z</published>
    <updated>2018-12-27T07:02:05.228Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在AWS Elastic Beanstalk中，如果选用Ruby with Passenger运行Rails时，会遇到一个问题，就是EB环境中的Passenger的max_pool_size是默认的6。如果EB中的Instance选用的是性能比较高的类型，只起6个Passenger进程会是一个巨大的浪费。下面介绍几个修改EB中Passenger max_pool_size参数的方法。&lt;/p&gt;
&lt;h4 id=&quot;Passenger官方说明&quot;&gt;&lt;a href=&quot;#Passenger官方说明&quot; class=&quot;headerlink&quot; title=&quot;Passenger官方说明&quot;&gt;&lt;/a&gt;Passenger官方说明&lt;/h4&gt;&lt;p&gt;最新的官方&lt;a href=&quot;https://www.phusionpassenger.com/library/config/standalone/intro.html#location-of-passengerfile-json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to configuring Passenger Standalone&lt;/a&gt;文档中，Passenger Standalone可以通过如下几种方式来修改启动参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一、传递参数给启动命令&lt;code&gt;passenger start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二、使用环境变量(从5.0.22开始)&lt;/li&gt;
&lt;li&gt;三、通过配置文件&lt;code&gt;Passengerfile.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="Elastic Beanstalk" scheme="http://www.jibing57.com/tags/Elastic-Beanstalk/"/>
    
      <category term="Passenger" scheme="http://www.jibing57.com/tags/Passenger/"/>
    
  </entry>
  
  <entry>
    <title>ElasticBeanstalk伸缩时偶发404的原因</title>
    <link href="http://www.jibing57.com/2018/12/24/404-on-Scale-Up-of-ElasticBeanstalk/"/>
    <id>http://www.jibing57.com/2018/12/24/404-on-Scale-Up-of-ElasticBeanstalk/</id>
    <published>2018-12-24T12:45:51.000Z</published>
    <updated>2018-12-25T09:19:31.850Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用EB Passenger with Ruby部署rails时，如果是以默认配置启动，没有做对应的配置，在ASG Scale Up的时候，可能会有请求没法正常处理，返回404。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;EB中创建的ELB，默认是使用TCP:80的方式来检查Instance的健康状态的。&lt;/li&gt;
&lt;li&gt;ELB的&lt;code&gt;health check&lt;/code&gt;的默认&lt;code&gt;Interval&lt;/code&gt;是10 seconds，&lt;code&gt;Healthy threshold&lt;/code&gt;是3 requests。&lt;/li&gt;
&lt;li&gt;当ASG Scale Up时，新建的Instance中Passenger在Rails APP部署完成之前就已经在监听80端口了。&lt;/li&gt;
&lt;li&gt;Passenger启动30秒之后，因为超过了&lt;code&gt;Healthy threshold * Interval&lt;/code&gt;的时间, 并且每次检查都是OK的，ELB会判定Instance是可用的，就会将流量导入到该Instance中。&lt;/li&gt;
&lt;li&gt;但此时rails APP可能并没有部署完成(bundle install加上precompile，部署一个新的APP可能需要5分钟左右)，所以client会得到404的错误。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="Elastic Beanstalk" scheme="http://www.jibing57.com/tags/Elastic-Beanstalk/"/>
    
      <category term="Elastic Load Balancing" scheme="http://www.jibing57.com/tags/Elastic-Load-Balancing/"/>
    
      <category term="AutoScaling" scheme="http://www.jibing57.com/tags/AutoScaling/"/>
    
  </entry>
  
  <entry>
    <title>Node中heap out of memory的解决办法</title>
    <link href="http://www.jibing57.com/2018/12/17/how-to-handle-heap-out-of-memory-in-node/"/>
    <id>http://www.jibing57.com/2018/12/17/how-to-handle-heap-out-of-memory-in-node/</id>
    <published>2018-12-17T14:27:31.000Z</published>
    <updated>2018-12-23T06:22:55.542Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;公司一个ReactOnRails的项目，之前一直都是跑的好好的。上次一个小修改后，发布预编译React代码的时候，屡次出现&lt;code&gt;FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory&lt;/code&gt; 的错误。&lt;/p&gt;
&lt;h3 id=&quot;调查&quot;&gt;&lt;a href=&quot;#调查&quot; class=&quot;headerlink&quot; title=&quot;调查&quot;&gt;&lt;/a&gt;调查&lt;/h3&gt;&lt;p&gt;项目使用的是webpacker打包js代码，一开始是以为webpacker的问题，调查了一圈下来，最终发现是node中V8的限制。默认情况下，在64位系统下内存使用是有限制的，有一说是1.4GB，有一说是1.76GB。但在node官网搜了一圈也没找到明确说现在的限制是多少。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://www.jibing57.com/categories/Code/"/>
    
    
      <category term="Nodejs" scheme="http://www.jibing57.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>在S3上开启CORS</title>
    <link href="http://www.jibing57.com/2018/12/11/how-to-enable-cors-on-S3/"/>
    <id>http://www.jibing57.com/2018/12/11/how-to-enable-cors-on-S3/</id>
    <published>2018-12-11T11:33:25.000Z</published>
    <updated>2018-12-11T15:36:54.345Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在浏览器中使用AWS的SDK直接上传文件到S3时，需要在S3 Bucket上配置CORS才能成功上传，否则ajax请求会被浏览器拦截。&lt;/p&gt;
&lt;h3 id=&quot;普通CORS访问配置&quot;&gt;&lt;a href=&quot;#普通CORS访问配置&quot; class=&quot;headerlink&quot; title=&quot;普通CORS访问配置&quot;&gt;&lt;/a&gt;普通CORS访问配置&lt;/h3&gt;&lt;p&gt;官方文档&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html#how-do-i-enable-cors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;中提供了开启CORS的范例，摘录如下:&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="S3" scheme="http://www.jibing57.com/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>如何配置Nginx的Dynamic Upstream指向ELB</title>
    <link href="http://www.jibing57.com/2018/11/27/nginx-with-dynamic-upstreams-to-ELB/"/>
    <id>http://www.jibing57.com/2018/11/27/nginx-with-dynamic-upstreams-to-ELB/</id>
    <published>2018-11-27T13:36:48.000Z</published>
    <updated>2018-12-23T12:16:40.890Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;公司有一个项目，部署有多个AWS环境，但由于一系列复杂的原因，需要先在账号A下备案的域名来使用在账号B中部署的服务，后续再将域名备案转到账号B中。&lt;br&gt;临时的解决办法就是在账号A下起一个Instance，通过Nginx反向代理到账号B的一个Classic ELB中。&lt;/p&gt;
&lt;p&gt;起初服务跑的很顺畅，后来一天突然服务不可用，页面显示504 Gateway Timeout，查看了Nginx的日志，发现有多条&lt;code&gt;upstream timed out (110: Connection timed out) while connecting to upstream&lt;/code&gt;的错误日志。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="Elastic Load Balancing" scheme="http://www.jibing57.com/tags/Elastic-Load-Balancing/"/>
    
      <category term="Nginx" scheme="http://www.jibing57.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>在Amazon Linux和Elastic Beanstalk中安装ffmpeg的方法</title>
    <link href="http://www.jibing57.com/2018/11/15/a-way-to-install-ffmpeg-to-Amazon-Linux-and-ElasticBeanstalk/"/>
    <id>http://www.jibing57.com/2018/11/15/a-way-to-install-ffmpeg-to-Amazon-Linux-and-ElasticBeanstalk/</id>
    <published>2018-11-15T12:34:53.000Z</published>
    <updated>2018-11-17T03:27:39.860Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因为项目需要，需要在EC2和EB中安装FFMPEG来处理视频。 &lt;/p&gt;
&lt;p&gt;但Amazon Linux默认的yum源中没有FFMPEG，因此需要手动进行安装。&lt;/p&gt;
&lt;p&gt;网上有各种的安装方法，有使用Nux Dextop YUM的安装，也有直接使用Static Builds的方式。经过比较试验，最终决定使用Static Builds的方式进行安装，安装方法记录如下。 &lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="Elastic Beanstalk" scheme="http://www.jibing57.com/tags/Elastic-Beanstalk/"/>
    
      <category term="EC2" scheme="http://www.jibing57.com/tags/EC2/"/>
    
      <category term="FFMPEG" scheme="http://www.jibing57.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>使用ssh隧道访问内网资源</title>
    <link href="http://www.jibing57.com/2018/09/15/how-to-access-internal-by-ssh-tunnel/"/>
    <id>http://www.jibing57.com/2018/09/15/how-to-access-internal-by-ssh-tunnel/</id>
    <published>2018-09-15T06:31:21.000Z</published>
    <updated>2018-09-16T07:03:13.813Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;日常开发过程中，会遇到一些情况需要和对端机构或公司进行联调。此时有可能会需要访问对端机构内部的一些网页或API。&lt;/p&gt;
&lt;p&gt;正规流程中，要访问内网，如果对端机构有VPN服务，应该是申请一个VPN来进行操作，这种方式比较安全可靠。但实际操作过程中，可能对端机构没有VPN服务，或者走VPN流程繁琐。此时如果你有对端机构中某个内网Linux机器的ssh登陆权限,而且该Linux机器可以可以访问相关网页或者API，则可以通过ssh tunnel的方式，临时来访问对端机构的内部资源。&lt;/p&gt;
&lt;p&gt;接下来，通过使用两台EC2来模拟内网环境,来介绍如何在Mac机器上使用ssh tunnel访问内网资源。&lt;/p&gt;
&lt;h3 id=&quot;搭建说明&quot;&gt;&lt;a href=&quot;#搭建说明&quot; class=&quot;headerlink&quot; title=&quot;搭建说明&quot;&gt;&lt;/a&gt;搭建说明&lt;/h3&gt;&lt;h4 id=&quot;搭建模拟用的EC2&quot;&gt;&lt;a href=&quot;#搭建模拟用的EC2&quot; class=&quot;headerlink&quot; title=&quot;搭建模拟用的EC2&quot;&gt;&lt;/a&gt;搭建模拟用的EC2&lt;/h4&gt;&lt;p&gt;首先，开启两台EC2，一台用来模拟ssh的跳板机(Jumpbox)，一台用来模拟内部网页服务器(HttpServer)。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.jibing57.com/categories/Tools/"/>
    
    
      <category term="EC2" scheme="http://www.jibing57.com/tags/EC2/"/>
    
      <category term="MacOS" scheme="http://www.jibing57.com/tags/MacOS/"/>
    
      <category term="SSH" scheme="http://www.jibing57.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>由于EC2中no space left引起的EB警报</title>
    <link href="http://www.jibing57.com/2018/08/11/EB-warning-due-to-no-space-left-on-device-issue-on-EC2/"/>
    <id>http://www.jibing57.com/2018/08/11/EB-warning-due-to-no-space-left-on-device-issue-on-EC2/</id>
    <published>2018-08-11T12:12:13.000Z</published>
    <updated>2018-08-30T05:02:58.269Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h3&gt;&lt;p&gt;周末早上突然收到大量Elastic Beanstalk的警报邮件，提示一个跑Rails的EB环境中有大量的请求是HTTP 5xx。&lt;/p&gt;
&lt;p&gt;登陆AWS Console查看相关Event，已经有持续的WARN提示有大量的HTTP 5xx请求。&lt;br&gt;&lt;img src=&quot;/images/AWS/EBNoSpaceLeft/amounts_of_5XX_on_EB_event.png&quot; alt=&quot;amounts_of_5XX_on_EB_event&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;解决过程&quot;&gt;&lt;a href=&quot;#解决过程&quot; class=&quot;headerlink&quot; title=&quot;解决过程&quot;&gt;&lt;/a&gt;解决过程&lt;/h3&gt;&lt;p&gt;使用EB console下载了各个Instanc的日志，仔细进行排查。&lt;/p&gt;
&lt;p&gt;最后在一个Instance的Rails log中发现有请求提示&lt;code&gt;No space left on device&lt;/code&gt;。原来是Instance的磁盘满了，导致了部分需要写临时文件的请求失败了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;F, [2018-08-11T02:10:43.084147 #11559] FATAL -- :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Errno::ENOSPC (No space left on device @ rb_sysopen - /var/app/current/tmp/cache/rack%3A%3Aattack%3A306790688%3Alocations%2Fip%3A46.229.168.8120180811-11559-4156fj):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  app/middleware/catch_json_parse_errors.rb:8:in `call&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="Elastic Beanstalk" scheme="http://www.jibing57.com/tags/Elastic-Beanstalk/"/>
    
      <category term="AutoScaling" scheme="http://www.jibing57.com/tags/AutoScaling/"/>
    
      <category term="EC2" scheme="http://www.jibing57.com/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>macOS 10.13.2下SSH命令Invalid key length错误的原因</title>
    <link href="http://www.jibing57.com/2018/05/21/ssh-key-Invalid-key-length-Error-on-Macos/"/>
    <id>http://www.jibing57.com/2018/05/21/ssh-key-Invalid-key-length-Error-on-Macos/</id>
    <published>2018-05-21T11:53:07.000Z</published>
    <updated>2018-05-23T06:48:46.315Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;升级到Macos 10.13.2后，使用ssh以key方式登陆一个12年配置的服务器的时候，ssh命令报告了&lt;code&gt;Invalid key length&lt;/code&gt;的错误。&lt;/p&gt;
&lt;p&gt;很是纳闷，服务器和本地的key都是配置好后就没动过的，key pair本身肯定没问题啊，怎么会报错了呢?&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;Google了一下，发现是MacOS使用的OpenSSH版本升级到了7.6，小于1024bits的RSA keys已经不被支持了。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;ssh-keygen&lt;/code&gt;查看了一下public key，发现是1023bit的。所以ssh时候报了&lt;code&gt;Invalid key length&lt;/code&gt;的错误。&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://www.jibing57.com/categories/Shell/"/>
    
    
      <category term="MacOS" scheme="http://www.jibing57.com/tags/MacOS/"/>
    
      <category term="SSH" scheme="http://www.jibing57.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>macOS 10.13 High Sierra读写NTFS移动硬盘</title>
    <link href="http://www.jibing57.com/2018/05/10/how-to-write-NTFS-Deives-on-a-Mac-10.13/"/>
    <id>http://www.jibing57.com/2018/05/10/how-to-write-NTFS-Deives-on-a-Mac-10.13/</id>
    <published>2018-05-10T12:30:07.000Z</published>
    <updated>2018-05-14T06:55:13.357Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;系统升级到10.13后，没用过移动硬盘，所以一直也没发现以前装的osxfuse+ntfs-3g在系统更新后已经失效了。结果么在要使用的时候发现悲剧了，在10.13中没法写NTFT格式的移动硬盘了。&lt;/p&gt;
&lt;p&gt;上网搜了一下，How-To Geek上面有一篇文章，详细讲述了Macos下挂载NTFS移动硬盘的几种方法,有收费方案也有免费方案，并比较了每个方案的优缺点。 虽然文章是基于macOS 10.12 Sierra的，但各个方案的优缺点同样适用于10.13。&lt;a href=&quot;https://www.howtogeek.com/236055/how-to-write-to-ntfs-drives-on-a-mac/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Write to NTFS Drives on a Mac&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.jibing57.com/categories/Tools/"/>
    
    
      <category term="MacOS" scheme="http://www.jibing57.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac下几个处理图片的命令</title>
    <link href="http://www.jibing57.com/2018/04/25/command-line-tools-to-check-images-on-macos/"/>
    <id>http://www.jibing57.com/2018/04/25/command-line-tools-to-check-images-on-macos/</id>
    <published>2018-04-25T14:49:01.000Z</published>
    <updated>2018-04-27T08:11:54.020Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;Macos下，查看图片，默认就是使用Preview。Preview基本包含了普通人能用到的各种功能。&lt;br&gt;但有时候需要批量处理图片时，常规的GUI工具会显得不太方便，使用命令来操作能够更快捷高效。下面介绍几个Macos下和图片相关的几个命令。&lt;/p&gt;
&lt;h3 id=&quot;查看图片尺寸&quot;&gt;&lt;a href=&quot;#查看图片尺寸&quot; class=&quot;headerlink&quot; title=&quot;查看图片尺寸&quot;&gt;&lt;/a&gt;查看图片尺寸&lt;/h3&gt;&lt;h4 id=&quot;系统自带file命令&quot;&gt;&lt;a href=&quot;#系统自带file命令&quot; class=&quot;headerlink&quot; title=&quot;系统自带file命令&quot;&gt;&lt;/a&gt;系统自带file命令&lt;/h4&gt;&lt;p&gt;在命令行下查看图片的分辨率，可以直接使用Macos自带的file命令即可。&lt;br&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://www.jibing57.com/categories/Shell/"/>
    
    
      <category term="MacOS" scheme="http://www.jibing57.com/tags/MacOS/"/>
    
      <category term="Image" scheme="http://www.jibing57.com/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣图片403问题</title>
    <link href="http://www.jibing57.com/2018/04/24/douban-image-403/"/>
    <id>http://www.jibing57.com/2018/04/24/douban-image-403/</id>
    <published>2018-04-24T12:14:50.000Z</published>
    <updated>2018-04-25T02:37:13.744Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起由&quot;&gt;&lt;a href=&quot;#起由&quot; class=&quot;headerlink&quot; title=&quot;起由&quot;&gt;&lt;/a&gt;起由&lt;/h3&gt;&lt;p&gt;发布了一版blog到github上。偶然间发现&lt;a href=&quot;/douban&quot;&gt;豆瓣页面&lt;/a&gt;中书的图片都无法显示了。打开Inspector调查了下，发现请求豆瓣图片的链接返回的都是403 Forbidden。&lt;br&gt;&lt;img src=&quot;/images/Hexo/douban_image_403.png&quot; alt=&quot;douban_image_403.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;网上搜索了一下，可能的原因就是豆瓣为了封杀微信小程序在页面上直接请求豆瓣的图片，封杀了图片的外链。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;尝试着将豆瓣API返回的图片链接拷贝到浏览器中直接访问，发现可以加载图片，那估计豆瓣是通过检测HTTP Request中的referer Header来实现防盗链。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://www.jibing57.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://www.jibing57.com/tags/Hexo/"/>
    
      <category term="Douban" scheme="http://www.jibing57.com/tags/Douban/"/>
    
      <category term="Nodejs" scheme="http://www.jibing57.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>S3进阶系列(二) ——权限管理</title>
    <link href="http://www.jibing57.com/2018/04/21/aws-s3-master-permission/"/>
    <id>http://www.jibing57.com/2018/04/21/aws-s3-master-permission/</id>
    <published>2018-04-21T09:59:59.000Z</published>
    <updated>2018-04-23T02:59:55.711Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是S3的权限管理&quot;&gt;&lt;a href=&quot;#什么是S3的权限管理&quot; class=&quot;headerlink&quot; title=&quot;什么是S3的权限管理&quot;&gt;&lt;/a&gt;什么是S3的权限管理&lt;/h3&gt;&lt;p&gt;S3的权限管理是任何使用S3的人都无法绕开的功能,决定了S3中的Object是否能够被访问。&lt;/p&gt;
&lt;p&gt;权限管理本质上解决了这么一个问题: 谁(Principal)能够在何种条件(condition)下被允许或拒绝(Effect)对哪些资源(Resource)做何种操作(Action)&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="S3" scheme="http://www.jibing57.com/tags/S3/"/>
    
      <category term="AWS CLI" scheme="http://www.jibing57.com/tags/AWS-CLI/"/>
    
      <category term="IAM" scheme="http://www.jibing57.com/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>如何去除SSH key中的passphrase</title>
    <link href="http://www.jibing57.com/2018/04/19/how-to-remove-the-passphrase-of-ssh-key/"/>
    <id>http://www.jibing57.com/2018/04/19/how-to-remove-the-passphrase-of-ssh-key/</id>
    <published>2018-04-19T13:15:28.000Z</published>
    <updated>2018-04-19T08:15:06.891Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;去除passphrase的方法&quot;&gt;&lt;a href=&quot;#去除passphrase的方法&quot; class=&quot;headerlink&quot; title=&quot;去除passphrase的方法&quot;&gt;&lt;/a&gt;去除passphrase的方法&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;ssh-keygen&lt;/code&gt;来重新设置一个空的passphrase, 就相当于去除了原来的passphrase, 答案来自&lt;a href=&quot;https://stackoverflow.com/a/112409&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;, 回答者还很贴心的提示，输入的passphrase会被记录在~/.bash_history中，别忘记处理这个情况。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://www.jibing57.com/categories/Shell/"/>
    
    
      <category term="Linux" scheme="http://www.jibing57.com/tags/Linux/"/>
    
      <category term="SSH" scheme="http://www.jibing57.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>S3进阶系列(一) —— S3基础知识</title>
    <link href="http://www.jibing57.com/2018/04/18/aws-s3-master-basic/"/>
    <id>http://www.jibing57.com/2018/04/18/aws-s3-master-basic/</id>
    <published>2018-04-18T12:44:08.000Z</published>
    <updated>2018-04-20T03:22:02.880Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;S3是AWS服务最早推出的几项服务之一，也是使用最为频繁的几个AWS服务之一。官网文档以及网上文章零零散散看了不少,实际使用中也用过S3的大多数功能，但“纸上得来终觉浅，绝知此事要躬行”，决定给自己挖个坑，结合已读资料和实际使用经验，系统地来梳理一下S3的已有功能。&lt;/p&gt;
&lt;p&gt;本篇是第一篇,介绍一下S3的一些基础知识。希望能够坚持把这个系列写完。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="S3" scheme="http://www.jibing57.com/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>订阅RDS事件</title>
    <link href="http://www.jibing57.com/2018/03/16/how-to-subscribe-RDS-event/"/>
    <id>http://www.jibing57.com/2018/03/16/how-to-subscribe-RDS-event/</id>
    <published>2018-03-16T12:22:54.000Z</published>
    <updated>2018-03-19T02:40:03.535Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于RDS状态的监控，除了常规的CloudWatch Metric以外。RDS还有一个事件机制，能够将RDS的事件通知到SNS。&lt;/p&gt;
&lt;h3 id=&quot;RDS-Event简介&quot;&gt;&lt;a href=&quot;#RDS-Event简介&quot; class=&quot;headerlink&quot; title=&quot;RDS Event简介&quot;&gt;&lt;/a&gt;RDS Event简介&lt;/h3&gt;&lt;h4 id=&quot;RDS-Event-Source-type&quot;&gt;&lt;a href=&quot;#RDS-Event-Source-type&quot; class=&quot;headerlink&quot; title=&quot;RDS Event - Source type&quot;&gt;&lt;/a&gt;RDS Event - Source type&lt;/h4&gt;&lt;p&gt;RDS的事件类型分为如下六大类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库实例(DB instance)&lt;/li&gt;
&lt;li&gt;数据库集群(DB cluster)&lt;/li&gt;
&lt;li&gt;数据库快照(DB snapshot)&lt;/li&gt;
&lt;li&gt;数据库集群快照(DB cluster snapshot)&lt;/li&gt;
&lt;li&gt;数据库安全组(DB security group)&lt;/li&gt;
&lt;li&gt;数据库参数组(DB parameter group)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://www.jibing57.com/categories/AWS/"/>
    
    
      <category term="RDS" scheme="http://www.jibing57.com/tags/RDS/"/>
    
  </entry>
  
</feed>
